{"version":3,"sources":["universe/configure.tsx","modules/Module.tsx","managers/TreeManager.tsx","modules/array/LinearArray.tsx","modules/array/RectArray.tsx","modules/modify/Choose.tsx","modules/modify/RemoveChildren.tsx","modules/TransformVariables.ts","modules/MatrixUtils.ts","modules/modify/Xform.tsx","modules/PresentationVariables.ts","modules/prim/Ellipse.tsx","modules/SVGUtils.ts","modules/prim/Ngon.tsx","utils/dumbMemoize.ts","modules/registry.ts","modules/prim/Rect.tsx","components/Icon.tsx","components/GlobalToolbar.tsx","utils/serde.ts","sidebar-panels/FilePanel.tsx","components/GenericVariableConfigRow.tsx","components/NodeConfigView.tsx","components/NodeTree.tsx","components/TreeToolbar.tsx","modules/pseudo/Document.tsx","components/QuickGVarBar.tsx","sidebar-panels/TreePanel.tsx","utils/evaluator.ts","utils/RandomGenerator.ts","universe/Context.tsx","universe/Status.tsx","sidebar-panels/GVarsPanel.tsx","utils/arrays.ts","views/App.tsx","utils/storage.ts","utils/defaultConfig.ts","index.tsx","universe/render.tsx"],"names":["generateId","Math","floor","random","toString","duplicate","nodeConfig","walk","wConfig","id","module","config","cloneDeep","children","map","configure","moduleName","variables","registry","defaults","getVariableDefaults","Object","assign","forEach","v","name","default","UniversalVariables","group","TreeManager","tree","nodeCache","treeUpdateListeners","newTree","this","updateNodeCache","invokeTreeUpdateListeners","newNodeCache","node","parent","child","setImmediate","listener","nodeId","cacheEntry","getNodeCacheEntryUnsafe","getNodeCacheEntry","Error","nodeToReplace","newNodes","replace","childList","childIndex","indexOf","splice","push","variableName","value","getNode","parentNodeId","newNode","addChildInternal","parentNode","wrappedNode","wrappedNodeParent","getNodeParent","wrapperNode","replaceOrEmsiblingNode","withHierarchy","doomedNode","doomedNodeParent","nodeParent","sourceNodeId","newParentNodeId","sourceNode","sourceNodeParent","targetNodeId","copiedNode","acceptsChildren","render","context","evaluateNodeConfig","number","variable","nodes","nNumber","round","parseFloat","i","subcontext","renderNodesInto","SQRT_THREE","sqrt","SQRT_THREE_OVER_TWO","makeHex","hex","x","y","choices","numberX","numberY","variableX","variableY","newVariables","hexX","hexY","indexVariable","index","parseInt","length","evaluateFromNodeConfig","filterContext","keepExpression","keep","filter","evaluate","multiply","m1","m2","a","c","b","d","e","f","splitMatrixAndProps","props","matrix","r","sx","sy","translate","isFinite","rotateDEG","scale","makeMatrix","newProps","TransformVariables","concat","renderChildren","opacity","transform","toSVG","type","PresentationVariables","radiusX","radiusY","stroke","fill","cleanPresentationProps","cx","cy","rx","ry","key","getId","TWO_PI","PI","generatePathString","fn","memo","memoizedFn","args","argsStr","join","dumbMemoize","vertices","radius1","radius2","tilt1","tilt2","path","radius","angle","cos","sin","isNaN","toFixed","Choose","Ellipse","LinearArray","Ngon","Rect","width","height","RectArray","RemoveChildren","Xform","keys","displayName","xmlns","viewBox","GlobalToolbarIcons","fileTree","require","save","tune","GlobalToolbar","tabs","icon","className","t","active","activeTab","title","onClick","onChangeTab","Icon","React","documentDefaults","background","gvars","serialize","document","docWithNodes","version","deserialize","obj","Array","isArray","from","doc","FilePanel","state","serializedState","dumpState","event","treeManager","getTree","setState","JSON","stringify","shiftKey","undefined","loadState","stateJson","parse","alert","onLoadDocument","saveSVG","svgString","ReactDOMServer","rendered","blob","Blob","url","URL","createObjectURL","downloadLink","createElement","download","Date","href","body","appendChild","click","setTimeout","removeChild","revokeObjectURL","onChange","target","GenericVariableConfigRow","extraControls","input","handleChange","VariableConfigRow","status","NodeConfigView","moduleClass","forceModule","variableDefinitions","noUniversalVariables","variablesByGroup","groupBy","variablesForNode","getVariablesForNode","sort","colSpan","getErrorsForNode","err","TreeNode","selectedNode","onSelectNode","onRepositionNode","draggable","preventDefault","stopPropagation","onDragStart","dataTransfer","clearData","setData","effectAllowed","onDragOver","dropEffect","types","includes","altKey","onDrop","getData","copy","nodeConfigs","TreeLevel","currentTarget","nodeAcceptsChildren","TreeToolbar","dropdowns","method","addChildNode","addSiblingNode","wrapNode","hideDropdowns","deleteNode","values","dropdown","hide","childMode","childText","allowAddSibling","getNodeParentOrNull","disabled","ref","instance","wrap","handleAddNode","addChild","addSibling","handleDeleteNode","QuickGVar","gvar","min","max","step","valueAsNumber","QuickGVarBar","TreePanel","onChangeNodeVariable","newValue","changeNodeVariable","forceUpdate","onChangeDocumentVariable","copyNode","moveNode","selectedNodeId","onChangeGvarValue","selectedNodeConfig","getNodeOrNull","NodeTree","DocumentModule","expressionFnCache","evaluateExpression","expression","namespace","startsWith","Function","slice","test","createRandomGenerator","seedString","seed","s","charCodeAt","hashString","_evaluate","tag","errorDefault","addError","console","warn","Context","idPrefix","rng","defaultNamespace","prepareNamespace","forNode","mergedVariables","val","additionalVariables","creator","memoizeOnFirstInvocation","rand","bind","String","expressionMap","evaluated","hasOwnProperty","evaluateAll","suffix","Status","nodeErrors","nodeVariables","error","Set","add","GVarPanel","onModifyGvar","onDeleteGvar","style","display","flex","GVarsPanel","onAddGvar","removeInPlace","array","App","loadDocument","replaceTree","tabId","redrawCurrent","fromCharCode","some","g","getNextGvarName","numVal","addTreeUpdateListener","renderDrawing","saveToStorage","loadFromStorage","localStorage","setItem","removeItem","storageObj","rawValue","getItem","storage","renderedChildren","configContent","wrapper","ReactDOM","renderNode","addVariables","targetArray","renderedElts","j"],"mappings":"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","file":"static/js/main.c8f67172.chunk.js","sourcesContent":["import { cloneDeep } from 'lodash';\nimport Module, { getVariableDefaults } from '../modules/Module';\nimport registry from '../modules/registry';\nimport { NodeConfig } from '../types';\n\nfunction generateId() {\n  return `${Math.floor(Math.random() * 0xffffffff).toString(36)}`;\n}\n\nexport function duplicate(nodeConfig: NodeConfig): NodeConfig {\n  function walk(wConfig: NodeConfig): NodeConfig {\n    return {\n      id: generateId(),\n      module: wConfig.module,\n      config: cloneDeep(wConfig.config),\n      children: wConfig.children.map(walk),\n    };\n  }\n\n  return walk(nodeConfig);\n}\n\nexport function configure(\n  moduleName: string,\n  variables: { [key: string]: any },\n  children: NodeConfig[] = [],\n): NodeConfig {\n  const module: Module = registry[moduleName];\n  const defaults = getVariableDefaults(module);\n  return {\n    id: generateId(),\n    module: moduleName,\n    config: Object.assign({}, defaults, variables),\n    children,\n  };\n}\n","import { ReactElement } from 'react';\nimport Context from '../universe/Context';\nimport { VariableDefinition } from '../types';\n\nexport default interface Module {\n  acceptsChildren: boolean;\n  noUniversalVariables?: boolean;\n  variables: VariableDefinition[];\n\n  render(context: Context): Array<ReactElement>;\n}\n\nexport function getVariableDefaults(module: Module): object {\n  const defaults = {};\n  module.variables.forEach((v) => {\n    defaults[v.name] = v.default;\n  });\n  return defaults;\n}\n\nexport const UniversalVariables = [{ name: 'seed', default: '', group: 'Randomness' }] as VariableDefinition[];\n","import { cloneDeep } from 'lodash';\nimport { NodeConfig } from '../types';\nimport { configure, duplicate } from '../universe/configure';\n\ninterface NodeCacheEntry {\n  node: NodeConfig;\n  parent: NodeConfig | null;\n}\n\ninterface NodeCacheType {\n  [key: string]: NodeCacheEntry;\n}\n\nexport type UpdateListener = (root: NodeConfig[]) => void;\n\nexport class TreeManager {\n  private tree: NodeConfig[] = [];\n  private nodeCache: NodeCacheType = {};\n  private treeUpdateListeners: UpdateListener[] = [];\n\n  public replaceTree(newTree: NodeConfig[]) {\n    this.tree = cloneDeep(newTree);\n    this.updateNodeCache();\n    this.invokeTreeUpdateListeners();\n  }\n\n  private updateNodeCache() {\n    const newNodeCache: NodeCacheType = {};\n\n    function walk(node: NodeConfig, parent: NodeConfig | null) {\n      newNodeCache[node.id] = { node, parent };\n      node.children.forEach((child) => walk(child, node));\n    }\n\n    this.tree.forEach((node) => walk(node, null));\n    this.nodeCache = newNodeCache;\n  }\n\n  private invokeTreeUpdateListeners() {\n    setImmediate(() => {\n      this.treeUpdateListeners.forEach((listener) => {\n        listener(this.tree);\n      });\n    });\n  }\n\n  public getNodeOrNull(nodeId: string): NodeConfig | null {\n    const cacheEntry = this.getNodeCacheEntryUnsafe(nodeId);\n    return cacheEntry ? cacheEntry.node : null;\n  }\n\n  public getNodeParentOrNull(nodeId: string): NodeConfig | null {\n    const cacheEntry = this.getNodeCacheEntryUnsafe(nodeId);\n    return cacheEntry ? cacheEntry.parent : null;\n  }\n\n  private getNode(nodeId: string): NodeConfig {\n    return this.getNodeCacheEntry(nodeId).node;\n  }\n\n  private getNodeParent(nodeId: string): NodeConfig | null {\n    return this.getNodeCacheEntry(nodeId).parent;\n  }\n\n  private getNodeCacheEntryUnsafe(nodeId: string): NodeCacheEntry | null {\n    const cacheEntry = this.nodeCache[nodeId];\n    return cacheEntry ? cacheEntry : null;\n  }\n\n  private getNodeCacheEntry(nodeId: string): NodeCacheEntry {\n    const cacheEntry = this.getNodeCacheEntryUnsafe(nodeId);\n    if (cacheEntry === null) {\n      throw new Error(`invalid node ${nodeId}`);\n    }\n    return cacheEntry;\n  }\n\n  private replaceOrEmsiblingNode(\n    parent: NodeConfig | null,\n    nodeToReplace: NodeConfig,\n    newNodes: ReadonlyArray<NodeConfig>,\n    replace: boolean,\n  ) {\n    const childList = parent === null ? this.tree : parent.children;\n    const childIndex = childList.indexOf(nodeToReplace);\n    if (childIndex > -1) {\n      if (replace) {\n        childList.splice(childIndex, 1, ...newNodes);\n      } else {\n        childList.splice(childIndex, 0, ...newNodes);\n      }\n    }\n  }\n\n  public getTree(): ReadonlyArray<NodeConfig> {\n    return this.tree;\n  }\n\n  public addTreeUpdateListener(listener: UpdateListener) {\n    this.treeUpdateListeners.push(listener);\n  }\n\n  public changeNodeVariable(nodeId: string, variableName: string, value: any) {\n    const node = this.getNode(nodeId);\n    node.config[variableName] = value;\n    this.invokeTreeUpdateListeners();\n  }\n\n  public addChildNode(parentNodeId: string | null, module: string) {\n    const newNode = configure(module, {});\n    this.addChildInternal(parentNodeId, newNode);\n    this.updateNodeCache();\n    this.invokeTreeUpdateListeners();\n    return newNode;\n  }\n\n  private addChildInternal(parentNodeId: string | null, newNode) {\n    if (parentNodeId) {\n      const parentNode = this.getNode(parentNodeId);\n      parentNode.children.push(newNode);\n      return parentNode;\n    } else {\n      this.tree.push(newNode);\n      return null;\n    }\n  }\n\n  public wrapNode(parentNodeId: string, module: string) {\n    const wrappedNode = this.getNode(parentNodeId);\n    const wrappedNodeParent = this.getNodeParent(parentNodeId);\n    const wrapperNode = configure(module, {}, [wrappedNode]);\n    this.replaceOrEmsiblingNode(wrappedNodeParent, wrappedNode, [wrapperNode], true);\n    this.updateNodeCache();\n    this.invokeTreeUpdateListeners();\n    return wrapperNode;\n  }\n\n  public deleteNode(nodeId: string, withHierarchy: boolean) {\n    const doomedNode = this.getNode(nodeId);\n    const doomedNodeParent = this.getNodeParent(nodeId);\n    this.replaceOrEmsiblingNode(doomedNodeParent, doomedNode, withHierarchy ? [] : doomedNode.children, true);\n    this.updateNodeCache();\n    this.invokeTreeUpdateListeners();\n  }\n\n  public addSiblingNode(nodeId: string, module: string) {\n    const newNode = configure(module, {});\n    const node = this.getNode(nodeId);\n    const nodeParent = this.getNodeParent(nodeId);\n    this.replaceOrEmsiblingNode(nodeParent, node, [newNode], false);\n    this.updateNodeCache();\n    this.invokeTreeUpdateListeners();\n  }\n\n  public moveNode(sourceNodeId: string, newParentNodeId: string | null) {\n    if (sourceNodeId === newParentNodeId) {\n      return false;\n    }\n    const sourceNode = this.getNode(sourceNodeId);\n    const sourceNodeParent = this.getNodeParent(sourceNodeId);\n    // Remove from parent...\n    this.replaceOrEmsiblingNode(sourceNodeParent, sourceNode, [], true);\n    // Add to new parent.\n    this.addChildInternal(newParentNodeId, sourceNode);\n    this.updateNodeCache();\n    this.invokeTreeUpdateListeners();\n    return true;\n  }\n\n  public copyNode(sourceNodeId: string, targetNodeId: string | null) {\n    const copiedNode = duplicate(this.getNode(sourceNodeId));\n    this.addChildInternal(targetNodeId, copiedNode);\n    this.updateNodeCache();\n    this.invokeTreeUpdateListeners();\n    return true;\n  }\n}\n","import Module from '../Module';\nimport Context from '../../universe/Context';\nimport { renderNodesInto } from '../../universe/render';\n\nexport default {\n  acceptsChildren: true,\n  variables: [\n    { name: 'number', default: '5' },\n    { name: 'variable', default: 'i' },\n  ],\n\n  render(context: Context) {\n    const { number, variable } = context.evaluateNodeConfig();\n    const nodes = [];\n    const nNumber = Math.round(parseFloat(number));\n    const node = context.node;\n    for (let i = 0; i < nNumber; i++) {\n      const subcontext = context.subcontext(\n        node,\n        {\n          [variable]: i,\n          [`${variable}F`]: i / (nNumber - 1),\n        },\n        `${i}`,\n      );\n      renderNodesInto(nodes, node.children, subcontext);\n    }\n    return nodes;\n  },\n} as Module;\n","import Module from '../Module';\nimport Context from '../../universe/Context';\nimport { renderNodesInto } from '../../universe/render';\n\nconst THREE_OVER_TWO = 3 / 2;\nconst SQRT_THREE = Math.sqrt(3);\nconst SQRT_THREE_OVER_TWO = SQRT_THREE / 2;\n\nfunction makeHex(hex: string, x: number, y: number): [number, number] {\n  if (hex === 'flat' || hex === 'flatRect') {\n    if (hex === 'flatRect') {\n      y -= x >> 1;\n    }\n    return [THREE_OVER_TWO * x, SQRT_THREE_OVER_TWO * x + SQRT_THREE * y];\n  } else if (hex === 'pointy' || hex === 'pointyRect') {\n    if (hex === 'pointyRect') {\n      x -= y >> 1;\n    }\n    return [SQRT_THREE * x + SQRT_THREE_OVER_TWO * y, THREE_OVER_TWO * y];\n  }\n  return [0, 0];\n}\n\nexport default {\n  acceptsChildren: true,\n  variables: [\n    { name: 'numberX', default: '5' },\n    { name: 'numberY', default: '5' },\n    { name: 'variableX', default: 'vx' },\n    { name: 'variableY', default: 'vy' },\n    {\n      name: 'hex',\n      default: 'none',\n      choices: ['none', 'flat', 'flatRect', 'pointy', 'pointyRect'],\n    },\n  ],\n\n  render(context: Context) {\n    const { node } = context;\n    const config = context.evaluateNodeConfig(node);\n    let { numberX, numberY } = config;\n    const { variableX, variableY, hex } = config;\n    const nodes = [];\n\n    numberX = Math.round(parseFloat(numberX));\n    numberY = Math.round(parseFloat(numberY));\n    for (let y = 0; y < numberY; y++) {\n      for (let x = 0; x < numberX; x++) {\n        const newVariables = {\n          [variableX]: x,\n          [variableY]: y,\n          [`${variableX}F`]: x / (numberX - 1),\n          [`${variableY}F`]: y / (numberY - 1),\n        };\n        if (hex !== 'none') {\n          const [hexX, hexY] = makeHex(hex, x, y);\n          newVariables[`${variableX}Hex`] = hexX;\n          newVariables[`${variableY}Hex`] = hexY;\n        }\n        const subcontext = context.subcontext(node, newVariables, `${x}x${y}`);\n        renderNodesInto(nodes, node.children, subcontext);\n      }\n    }\n    return nodes;\n  },\n} as Module;\n","import Module from '../Module';\nimport Context from '../../universe/Context';\nimport { renderNodesInto } from '../../universe/render';\n\nexport default {\n  acceptsChildren: true,\n  variables: [\n    { name: 'childIndex', default: '0' },\n    { name: 'indexVariable', default: 'u' },\n  ],\n\n  render(context: Context) {\n    const { node } = context;\n    const { childIndex, indexVariable } = context.evaluateNodeConfig(node);\n    const index = parseInt(childIndex, 10);\n    const child = node.children[index % node.children.length];\n    const nodes = [];\n    if (child) {\n      const subcontext = context.subcontext(\n        node,\n        {\n          [indexVariable]: childIndex,\n        },\n        `child${childIndex}`,\n      );\n      renderNodesInto(nodes, [child], subcontext);\n    }\n    return nodes;\n  },\n} as Module;\n","import Module from '../Module';\nimport Context from '../../universe/Context';\nimport { renderNodesInto } from '../../universe/render';\n\nexport default {\n  acceptsChildren: true,\n  variables: [\n    { name: 'keep', default: '=rand() < .5' },\n    { name: 'indexVariable', default: 'i' },\n  ],\n\n  render(context: Context) {\n    const node = context.node;\n    const indexVariable = context.evaluateFromNodeConfig('indexVariable');\n    const nodes = [];\n    renderNodesInto(nodes, node.children, context);\n    const filterContext = context.subcontext(node);\n    const keepExpression = node.config.keep || '';\n    return nodes.filter((child, index) =>\n      filterContext.evaluate(`keep ${index}`, keepExpression, {\n        [indexVariable]: index,\n      }),\n    );\n  },\n} as Module;\n","import { VariableDefinition } from '../types';\n\nconst group = 'Transform';\nexport default [\n  { name: 'x', default: '0', group },\n  { name: 'y', default: '0', group },\n  { name: 'r', default: '0', group },\n  { name: 'sx', default: '1', group },\n  { name: 'sy', default: '1', group },\n] as VariableDefinition[];\n","import { Matrix, rotateDEG, scale, translate } from 'transformation-matrix';\nimport { VariableMap } from '../types';\n\nconst multiply = (m1: Matrix, m2: Matrix): Matrix => {\n  return {\n    a: m1.a * m2.a + m1.c * m2.b,\n    b: m1.b * m2.a + m1.d * m2.b,\n    c: m1.a * m2.c + m1.c * m2.d,\n    d: m1.b * m2.c + m1.d * m2.d,\n    e: m1.a * m2.e + m1.c * m2.f + m1.e,\n    f: m1.b * m2.e + m1.d * m2.f + m1.f,\n  };\n};\n\ninterface TransformBag {\n  x: number;\n  y: number;\n  r: number;\n  sx: number;\n  sy: number;\n}\n\nexport function makeMatrix({ x, y, r, sx, sy }: TransformBag): Matrix {\n  let matrix = translate(isFinite(x) ? x : 0, isFinite(y) ? y : 0);\n  if (isFinite(r)) {\n    matrix = multiply(matrix, rotateDEG(r));\n  }\n  if (isFinite(sx) && isFinite(sy)) {\n    matrix = multiply(matrix, scale(sx, sy));\n  }\n  return matrix;\n}\n\nexport function splitMatrixAndProps(\n  props: VariableMap,\n): {\n  matrix: Matrix;\n  props: VariableMap;\n} {\n  const matrix = makeMatrix(props as TransformBag);\n  const newProps = Object.assign({}, props);\n  delete newProps.x;\n  delete newProps.y;\n  delete newProps.r;\n  delete newProps.sx;\n  delete newProps.sy;\n  return { matrix, props: newProps };\n}\n","import * as React from 'react';\nimport Module from '../Module';\nimport Context from '../../universe/Context';\nimport TransformVariables from '../TransformVariables';\nimport { toSVG } from 'transformation-matrix';\nimport { splitMatrixAndProps } from '../MatrixUtils';\n\nexport default {\n  acceptsChildren: true,\n  variables: TransformVariables.concat([{ name: 'opacity', default: '1' }]),\n\n  render(context: Context) {\n    const nodes = context.renderChildren();\n    const { props, matrix } = splitMatrixAndProps(context.evaluateNodeConfig());\n    const { opacity } = props;\n    return [\n      <g transform={toSVG(matrix)} opacity={opacity}>\n        {nodes}\n      </g>,\n    ];\n  },\n} as Module;\n","import { VariableDefinition } from '../types';\n\nconst group = 'Presentation';\nexport default [\n  { name: 'fill', default: '#333', group, type: 'color' },\n  { name: 'stroke', default: '', group, type: 'color' },\n  { name: 'strokeWidth', default: '0', group, type: 'number' },\n  { name: 'opacity', default: '1', group, type: 'number' },\n] as VariableDefinition[];\n","import * as React from 'react';\nimport Module from '../Module';\nimport Context from '../../universe/Context';\nimport { toSVG } from 'transformation-matrix';\nimport TransformVariables from '../TransformVariables';\nimport { splitMatrixAndProps } from '../MatrixUtils';\nimport PresentationVariables from '../PresentationVariables';\nimport { cleanPresentationProps } from '../SVGUtils';\n\nexport default {\n  variables: TransformVariables.concat(PresentationVariables).concat([\n    { name: 'radiusX', default: '20' },\n    { name: 'radiusY', default: '20' },\n  ]),\n\n  render(context: Context) {\n    const { props, matrix } = splitMatrixAndProps(context.evaluateNodeConfig());\n    const { radiusX } = props;\n    const radiusY = props.radiusY !== '' ? props.radiusY : radiusX;\n    delete props.radiusX;\n    delete props.radiusY;\n    cleanPresentationProps(props);\n    return [\n      <ellipse cx={0} cy={0} rx={radiusX} ry={radiusY} transform={toSVG(matrix)} key={context.getId()} {...props} />,\n    ];\n  },\n} as Module;\n","export function cleanPresentationProps(props: { [key: string]: any }): void {\n  if (props.stroke === '') {\n    delete props.stroke;\n  }\n  if (props.fill === '') {\n    delete props.fill;\n  }\n}\n","import * as React from 'react';\nimport Context from '../../universe/Context';\nimport TransformVariables from '../TransformVariables';\nimport { splitMatrixAndProps } from '../MatrixUtils';\nimport PresentationVariables from '../PresentationVariables';\nimport Module from '../Module';\nimport { toSVG } from 'transformation-matrix';\nimport dumbMemoize from '../../utils/dumbMemoize';\n\nconst TWO_PI = Math.PI * 2;\n\nconst generatePathString = dumbMemoize((vertices, radius1, radius2, tilt1, tilt2) => {\n  const path: string[] = [];\n  radius1 = parseFloat(radius1);\n  radius2 = parseFloat(radius2);\n  tilt1 = parseFloat(tilt1);\n  tilt2 = parseFloat(tilt2);\n  for (let i = 0; i < vertices; i++) {\n    const f = i / vertices;\n    const radius = i % 2 === 0 ? radius1 : radius2;\n    const angle = (f + (i % 2 === 0 ? tilt1 : tilt2)) * TWO_PI;\n    const x = Math.cos(angle) * radius;\n    const y = Math.sin(angle) * radius;\n    if (!(isNaN(x) || isNaN(y))) {\n      path.push(`${i === 0 ? 'M' : 'L'}${x.toFixed(3)},${y.toFixed(3)}`);\n    }\n  }\n  if (path.length > 0) {\n    path.push('z');\n  }\n  return path.join(' ');\n});\n\nexport default {\n  variables: TransformVariables.concat(PresentationVariables).concat([\n    { name: 'vertices', default: '5' },\n    { name: 'radius1', default: '5' },\n    { name: 'radius2', default: '5' },\n    { name: 'tilt1', default: '0' },\n    { name: 'tilt2', default: '0' },\n  ]),\n\n  render(context: Context) {\n    const { node } = context;\n    const { props, matrix } = splitMatrixAndProps(context.evaluateNodeConfig(node));\n    const path = generatePathString(props.vertices, props.radius1, props.radius2, props.tilt1, props.tilt2);\n\n    delete props.vertices;\n    delete props.radius1;\n    delete props.radius2;\n    delete props.tilt1;\n    delete props.tilt2;\n    return [<path d={path} {...props} key={context.getId(node.id)} transform={toSVG(matrix)} />];\n  },\n} as Module;\n","export default function dumbMemoize<T>(fn: (...args) => T): (...args) => T {\n  const memo: { [args: string]: T } = {};\n  const memoizedFn = (...args) => {\n    const argsStr = args.join('\\x01');\n    if (argsStr in memo) {\n      return memo[argsStr];\n    }\n    return (memo[argsStr] = fn(...args));\n  };\n  (memoizedFn as any).memo = memo;\n  return memoizedFn;\n}\n","import LinearArray from './array/LinearArray';\nimport RectArray from './array/RectArray';\nimport Choose from './modify/Choose';\nimport RemoveChildren from './modify/RemoveChildren';\nimport Xform from './modify/Xform';\nimport Module from './Module';\nimport Ellipse from './prim/Ellipse';\nimport Ngon from './prim/Ngon';\nimport Rect from './prim/Rect';\n\nconst registry = {\n  Choose,\n  Ellipse,\n  LinearArray,\n  Ngon,\n  Rect,\n  RectArray,\n  RemoveChildren,\n  Xform,\n} as { [name: string]: Module };\nexport default registry;\n\nObject.keys(registry).forEach((name) => {\n  (registry[name].render as any).displayName = `render_${name}`;\n});\n","import * as React from 'react';\nimport Module from '../Module';\nimport Context from '../../universe/Context';\nimport { toSVG } from 'transformation-matrix';\nimport TransformVariables from '../TransformVariables';\nimport { splitMatrixAndProps } from '../MatrixUtils';\nimport PresentationVariables from '../PresentationVariables';\n\nexport default {\n  variables: TransformVariables.concat(PresentationVariables).concat([\n    { name: 'width', default: '20' },\n    { name: 'height', default: '20' },\n  ]),\n\n  render(context: Context) {\n    const { node } = context;\n    const { props, matrix } = splitMatrixAndProps(context.evaluateNodeConfig(node));\n    return [\n      <rect x={-props.width / 2} y={-props.height / 2} transform={toSVG(matrix)} key={context.getId()} {...props} />,\n    ];\n  },\n} as Module;\n","import * as React from 'react';\n\nexport default ({ path, props }: { path: string; props?: object }) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" {...props}>\n    <path d={path} />\n  </svg>\n);\n","import * as cx from 'classnames';\nimport * as React from 'react';\nimport Icon from './Icon';\n\nconst GlobalToolbarIcons = {\n  fileTree: require('material-design-icons-svg/paths/file-tree'),\n  save: require('material-design-icons-svg/paths/content-save'),\n  tune: require('material-design-icons-svg/paths/tune'),\n};\n\ntype GlobalToolbarProps = {\n  activeTab: string;\n  onChangeTab: (id: string) => void;\n};\nexport default class GlobalToolbar extends React.Component<GlobalToolbarProps> {\n  public render() {\n    const tabs = [\n      { id: 'tree', icon: GlobalToolbarIcons.fileTree },\n      { id: 'file', icon: GlobalToolbarIcons.save },\n      { id: 'gvars', icon: GlobalToolbarIcons.tune },\n    ];\n    return (\n      <div id=\"global-toolbar\" className=\"toolbar\">\n        {tabs.map((t) => (\n          <div\n            key={t.id}\n            className={cx('btn', { active: this.props.activeTab === t.id })}\n            title={t.id}\n            onClick={() => this.props.onChangeTab(t.id)}\n          >\n            <Icon path={t.icon} />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import { Document, NodeConfig, SerializedDocument } from '../types';\n\nconst version = '0.1';\n\nconst documentDefaults: Partial<Document> = {\n  width: 800,\n  height: 800,\n  background: '',\n  gvars: [],\n};\n\nexport function serialize(document: Document, nodes: ReadonlyArray<NodeConfig>): SerializedDocument {\n  const docWithNodes: Document = { ...document, nodes: nodes as NodeConfig[] };\n  return { version, ...docWithNodes };\n}\n\nexport function deserialize(obj: any): Document {\n  if (Array.isArray(obj)) {\n    return {\n      ...documentDefaults,\n      nodes: Array.from(obj),\n    } as Document;\n  }\n  if (typeof obj !== 'object') {\n    throw new Error('Not an object');\n  }\n  if (obj.version === version) {\n    const doc: SerializedDocument = { ...obj };\n    delete doc.version;\n    return { ...documentDefaults, ...doc } as Document;\n  }\n  throw new Error(`Object version ${obj.version} not understood`);\n}\n","import * as React from 'react';\nimport * as ReactDOMServer from 'react-dom/server';\nimport { TreeManager } from '../managers/TreeManager';\nimport { Document } from '../types';\nimport { deserialize, serialize } from '../utils/serde';\nimport { LoadDocumentHandler } from '../handlers';\n\ninterface FilePanelProps {\n  treeManager: TreeManager;\n  rendered: any; // TODO: yigh\n  document: Document;\n  onLoadDocument: LoadDocumentHandler;\n}\n\ninterface FilePanelState {\n  serializedState: string;\n}\n\nexport default class FilePanel extends React.Component<FilePanelProps, FilePanelState> {\n  public state: FilePanelState = {\n    serializedState: '',\n  };\n\n  private dumpState = (event) => {\n    const doc = serialize(this.props.document, this.props.treeManager.getTree());\n    this.setState({\n      serializedState: JSON.stringify(doc, null, event.shiftKey ? undefined : 2),\n    });\n  };\n\n  private loadState = () => {\n    let stateJson;\n    try {\n      stateJson = JSON.parse(this.state.serializedState);\n    } catch (e) {\n      alert('Could not parse JSON: ' + e);\n      return;\n    }\n    try {\n      const doc = deserialize(stateJson);\n      this.props.onLoadDocument(doc);\n    } catch (e) {\n      alert('Could not read document:' + e);\n      return;\n    }\n  };\n\n  private saveSVG = () => {\n    const svgString = ReactDOMServer.renderToStaticMarkup(this.props.rendered).replace(\n      '<svg ',\n      '<svg xmlns=\"http://www.w3.org/2000/svg\" ',\n    );\n    const blob = new Blob([svgString], { type: 'image/svg+xml' });\n    const url = URL.createObjectURL(blob);\n    const downloadLink = Object.assign(document.createElement('a'), {\n      download: `coil-svg-${+new Date()}.svg`,\n      href: url,\n    });\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    setTimeout(() => {\n      const parentNode = downloadLink.parentNode;\n      if (parentNode) {\n        parentNode.removeChild(downloadLink);\n      }\n      URL.revokeObjectURL(url);\n    }, 100);\n  };\n\n  public render() {\n    return (\n      <div id=\"file-panel\">\n        <div>\n          <button className=\"btn standalone\" onClick={this.dumpState}>\n            Save state &darr;\n          </button>\n          <button className=\"btn standalone\" onClick={this.loadState}>\n            Load state &uarr;\n          </button>\n          <textarea\n            value={this.state.serializedState}\n            onChange={(e) => this.setState({ serializedState: e.target.value })}\n          />\n        </div>\n        <div>\n          <button className=\"btn standalone\" onClick={this.saveSVG}>\n            Save rendered SVG...\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport { VariableType } from '../types';\n\ninterface VariableConfigRowProps {\n  name: string;\n  type: VariableType;\n  choices?: string[];\n  value: any;\n  onChange: (value: string) => void;\n}\n\nconst GenericVariableConfigRow = ({ name, choices, type, onChange, value }: VariableConfigRowProps) => {\n  let extraControls: React.ReactElement | undefined;\n  let input: React.ReactElement | undefined;\n  value = value === undefined ? '' : value;\n\n  const handleChange = (event) => onChange(event.target.value.toString());\n\n  if (choices) {\n    input = (\n      <select value={value} onChange={handleChange}>\n        {choices.map((c) => (\n          <option key={c} value={c}>\n            {c}\n          </option>\n        ))}\n      </select>\n    );\n  } else {\n    input = <input type=\"text\" value={value} onChange={handleChange} />;\n  }\n  if (type === 'color') {\n    extraControls = <input type=\"color\" value={value} onChange={handleChange} />;\n  }\n\n  return (\n    <tr className=\"variable-config-row\">\n      <th>{name}</th>\n      <td>{input}</td>\n      <td>{extraControls}</td>\n    </tr>\n  );\n};\n\nexport default GenericVariableConfigRow;\n","import { groupBy } from 'lodash';\nimport * as React from 'react';\nimport Module, { UniversalVariables } from '../modules/Module';\nimport registry from '../modules/registry';\nimport { VariableDefinition } from '../types';\nimport { NodeConfig } from '../types';\nimport Status from '../universe/Status';\nimport { ChangeNodeConfigHandler } from '../handlers';\nimport GenericVariableConfigRow from './GenericVariableConfigRow';\n\ninterface NodeConfigViewProps {\n  nodeConfig: NodeConfig;\n  onChange: ChangeNodeConfigHandler;\n  status: Status;\n  forceModule?: Module;\n}\n\ninterface VariableConfigRowProps {\n  variable: VariableDefinition;\n  nodeConfig: NodeConfig;\n  onChange: ChangeNodeConfigHandler;\n  status: Status;\n}\n\nconst VariableConfigRow = ({ variable, nodeConfig, onChange, status }: VariableConfigRowProps) => {\n  return (\n    <GenericVariableConfigRow\n      name={variable.name}\n      type={variable.type || 'string'}\n      value={nodeConfig.config[variable.name] || ''}\n      onChange={(value) => onChange(nodeConfig, variable.name, value)}\n      choices={variable.choices}\n    />\n  );\n};\n\nexport default class NodeConfigView extends React.Component<NodeConfigViewProps, any> {\n  public render() {\n    const { nodeConfig, status, forceModule } = this.props;\n    const moduleClass: Module = forceModule || registry[nodeConfig.module];\n\n    if (!moduleClass) {\n      return (\n        <div>\n          The module {nodeConfig.module} is not available.\n          <textarea>{JSON.stringify(nodeConfig, null, 2)}</textarea>\n        </div>\n      );\n    }\n\n    const variableDefinitions = moduleClass.variables.concat(\n      moduleClass.noUniversalVariables ? [] : UniversalVariables,\n    );\n    const variablesByGroup = groupBy(variableDefinitions, (v) => v.group || 'Other');\n\n    const variablesForNode = status.getVariablesForNode(nodeConfig.id);\n    return (\n      <div>\n        <table>\n          <tbody>\n            {Object.keys(variablesByGroup)\n              .sort()\n              .map((group) => (\n                <React.Fragment key={group}>\n                  <tr key={`#${group}`} className=\"group-separator\">\n                    <th colSpan={3}>{group}</th>\n                  </tr>\n                  {variablesByGroup[group].map((variable: VariableDefinition) => (\n                    <VariableConfigRow\n                      key={variable.name}\n                      variable={variable}\n                      nodeConfig={nodeConfig}\n                      status={status}\n                      onChange={this.props.onChange}\n                    />\n                  ))}\n                </React.Fragment>\n              ))}\n          </tbody>\n        </table>\n        {variablesForNode.length ? (\n          <div className=\"debug\">Variables last render: {variablesForNode.join(', ')}</div>\n        ) : null}\n        <ul className=\"errors\">\n          {status.getErrorsForNode(nodeConfig.id).map((err, i) => (\n            <li key={i}>{err}</li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport registry from '../modules/registry';\nimport { NodeConfig } from '../types';\n\ninterface TreeCommonProps {\n  selectedNode: NodeConfig | null;\n  onSelectNode: (node: NodeConfig | null) => void;\n  onRepositionNode: (sourceNodeId: string, targetNodeId: string, copy: boolean) => void;\n}\n\ntype TreeNodeProps = TreeCommonProps & {\n  nodeConfig: NodeConfig;\n};\n\ntype TreeLevelProps = TreeCommonProps & {\n  nodeConfigs: ReadonlyArray<NodeConfig>;\n};\n\nconst DRAG_AND_DROP_DATA_ID = 'application/x-coil-nodeid';\n\nconst TreeNode = ({ nodeConfig, selectedNode, onSelectNode, onRepositionNode }: TreeNodeProps) => (\n  <li className={selectedNode === nodeConfig ? 'selected' : ''}>\n    {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n    <a\n      href=\"#\"\n      draggable={true}\n      onClick={(e) => {\n        onSelectNode(nodeConfig);\n        e.preventDefault();\n        e.stopPropagation();\n      }}\n      onDragStart={(event) => {\n        event.dataTransfer.clearData();\n        event.dataTransfer.setData(DRAG_AND_DROP_DATA_ID, nodeConfig.id);\n        event.dataTransfer.effectAllowed = 'all';\n      }}\n      onDragOver={(event) => {\n        event.dataTransfer.dropEffect = 'none';\n        if (event.dataTransfer.types.includes(DRAG_AND_DROP_DATA_ID)) {\n          if (registry[nodeConfig.module].acceptsChildren) {\n            event.dataTransfer.dropEffect = event.altKey ? 'copy' : 'link';\n            event.preventDefault();\n          }\n        }\n      }}\n      onDrop={(event) => {\n        const sourceNodeId = event.dataTransfer.getData(DRAG_AND_DROP_DATA_ID);\n        event.dataTransfer.dropEffect = event.altKey ? 'copy' : 'link';\n        const copy = event.dataTransfer.dropEffect === 'copy';\n        onRepositionNode(sourceNodeId, nodeConfig.id, copy);\n      }}\n    >\n      {nodeConfig.module}\n    </a>\n    {nodeConfig.children.length ? (\n      <TreeLevel\n        nodeConfigs={nodeConfig.children}\n        selectedNode={selectedNode}\n        onSelectNode={onSelectNode}\n        onRepositionNode={onRepositionNode}\n      />\n    ) : null}\n  </li>\n);\n\nconst TreeLevel = ({ nodeConfigs, selectedNode, onSelectNode, onRepositionNode }: TreeLevelProps) => (\n  <ul>\n    {nodeConfigs.map((nodeConfig: NodeConfig) => (\n      <TreeNode\n        key={nodeConfig.id}\n        nodeConfig={nodeConfig}\n        selectedNode={selectedNode}\n        onSelectNode={onSelectNode}\n        onRepositionNode={onRepositionNode}\n      />\n    ))}\n  </ul>\n);\n\nexport default ({ nodeConfigs, selectedNode, onSelectNode, onRepositionNode }: TreeLevelProps) => {\n  return (\n    <div\n      id=\"tree\"\n      onClick={(e) => {\n        if (e.currentTarget.id === 'tree') {\n          onSelectNode(null);\n        }\n      }}\n    >\n      <TreeLevel\n        nodeConfigs={nodeConfigs}\n        selectedNode={selectedNode}\n        onSelectNode={onSelectNode}\n        onRepositionNode={onRepositionNode}\n      />\n    </div>\n  );\n};\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport * as React from 'react';\nimport Dropdown, { DropdownContent, DropdownTrigger } from 'react-simple-dropdown';\nimport { TreeManager } from '../managers/TreeManager';\nimport registry from '../modules/registry';\nimport { NodeConfig } from '../types';\n\ninterface ToolbarProps {\n  treeManager: TreeManager;\n  selectedNode: NodeConfig | null;\n}\n\nfunction nodeAcceptsChildren(node: NodeConfig | null) {\n  return node && registry[node.module] && registry[node.module].acceptsChildren;\n}\n\nexport default class TreeToolbar extends React.Component<ToolbarProps, any> {\n  private dropdowns: { [key: string]: Dropdown } = {};\n\n  private handleAddNode(method: 'wrap' | 'child' | 'sibling', module: string) {\n    const { treeManager, selectedNode } = this.props;\n    switch (method) {\n      case 'child':\n        treeManager.addChildNode(selectedNode ? selectedNode.id : null, module);\n        break;\n      case 'sibling':\n        if (selectedNode) {\n          treeManager.addSiblingNode(selectedNode.id, module);\n        }\n        break;\n      case 'wrap':\n        if (selectedNode) {\n          treeManager.wrapNode(selectedNode.id, module);\n        }\n    }\n    this.hideDropdowns();\n  }\n\n  private handleDeleteNode(withHierarchy: boolean) {\n    const { treeManager, selectedNode } = this.props;\n    if (selectedNode) {\n      treeManager.deleteNode(selectedNode.id, withHierarchy);\n    }\n  }\n\n  public hideDropdowns() {\n    Object.values(this.dropdowns).forEach((dropdown) => {\n      return dropdown.hide();\n    });\n  }\n\n  public render() {\n    const { selectedNode } = this.props;\n    let childMode: 'child' | undefined;\n    let childText = 'Node';\n    let allowAddSibling = false;\n    if (selectedNode === null) {\n      childMode = 'child';\n      childText = 'Node';\n    }\n    if (nodeAcceptsChildren(selectedNode)) {\n      childMode = 'child';\n      childText = 'Child';\n    }\n    if (selectedNode) {\n      const parent = this.props.treeManager.getNodeParentOrNull(selectedNode.id);\n      if (parent === null || nodeAcceptsChildren(parent)) {\n        allowAddSibling = true;\n      }\n    }\n    return (\n      <div id=\"tree-toolbar\" className=\"toolbar\">\n        <Dropdown\n          disabled={!selectedNode}\n          ref={(instance) => {\n            this.dropdowns.wrap = instance;\n          }}\n        >\n          <DropdownTrigger className=\"btn\">Wrap...</DropdownTrigger>\n          <DropdownContent className=\"node-select\">\n            {Object.keys(registry)\n              .filter((module) => registry[module].acceptsChildren)\n              .map((module) => (\n                <a href=\"#\" key={module} onClick={() => this.handleAddNode('wrap', module)}>\n                  {module}\n                </a>\n              ))}\n          </DropdownContent>\n        </Dropdown>\n        <Dropdown\n          disabled={!childMode}\n          ref={(instance) => {\n            this.dropdowns.addChild = instance;\n          }}\n        >\n          <DropdownTrigger className=\"btn\">Add {childText}...</DropdownTrigger>\n          <DropdownContent className=\"node-select\">\n            {Object.keys(registry).map((module) => (\n              <a href=\"#\" key={module} onClick={() => this.handleAddNode('child', module)}>\n                {module}\n              </a>\n            ))}\n          </DropdownContent>\n        </Dropdown>\n        <Dropdown\n          disabled={!allowAddSibling}\n          ref={(instance) => {\n            this.dropdowns.addSibling = instance;\n          }}\n        >\n          <DropdownTrigger className=\"btn\">Add Sibling...</DropdownTrigger>\n          <DropdownContent className=\"node-select\">\n            {Object.keys(registry).map((module) => (\n              <a href=\"#\" key={module} onClick={() => this.handleAddNode('sibling', module)}>\n                {module}\n              </a>\n            ))}\n          </DropdownContent>\n        </Dropdown>\n        <div\n          className={'btn ' + (selectedNode ? '' : 'disabled')}\n          title=\"Shift-click to delete with hierarchy\"\n          onClick={(event) => {\n            this.handleDeleteNode(event.shiftKey);\n            event.preventDefault();\n          }}\n        >\n          Delete\n        </div>\n      </div>\n    );\n  }\n}\n","import Module from '../Module';\nimport Context from '../../universe/Context';\nexport default {\n  variables: [\n    { group: 'Document', name: 'width', default: '800' },\n    { group: 'Document', name: 'height', default: '800' },\n    { group: 'Document', name: 'background', default: '', type: 'color' },\n  ],\n  acceptsChildren: false,\n  noUniversalVariables: true,\n\n  render(context: Context) {\n    throw new Error('Document.render() should not be called');\n  },\n} as Module;\n","import * as React from 'react';\nimport { GVar } from '../types';\nimport { GVarValueChangeHandler } from '../ui-types';\n\ninterface QuickGVarProps {\n  gvar: GVar;\n  onChange: GVarValueChangeHandler;\n}\n\ninterface QuickGVarBarProps {\n  gvars: GVar[];\n  onChange: GVarValueChangeHandler;\n}\n\nconst QuickGVar: React.FC<QuickGVarProps> = ({ gvar, onChange }) => (\n  <div className=\"quick-gvar\">\n    <span>{gvar.name}</span>\n    {gvar.type === 'number' ? (\n      <input\n        type=\"range\"\n        min={gvar.min}\n        max={gvar.max}\n        step=\"any\"\n        value={gvar.value}\n        onChange={(e) => onChange(gvar, e.target.valueAsNumber)}\n      />\n    ) : null}\n  </div>\n);\n\nconst QuickGVarBar: React.FC<QuickGVarBarProps> = ({ gvars, onChange }) => (\n  <div className=\"quick-gvar-bar\">\n    {gvars.map((gvar) => (\n      <QuickGVar gvar={gvar} key={gvar.name} onChange={onChange} />\n    ))}\n  </div>\n);\n\nexport default QuickGVarBar;\n","import * as React from 'react';\nimport NodeConfigView from '../components/NodeConfigView';\nimport NodeTree from '../components/NodeTree';\nimport TreeToolbar from '../components/TreeToolbar';\nimport { TreeManager } from '../managers/TreeManager';\nimport { Document, NodeConfig } from '../types';\nimport Status from '../universe/Status';\nimport { default as DocumentModule } from '../modules/pseudo/Document';\nimport { ChangeDocumentConfigHandler, SelectNodeHandler } from '../handlers';\nimport QuickGVarBar from '../components/QuickGVarBar';\nimport { GVarValueChangeHandler } from '../ui-types';\n\ninterface TreePanelProps {\n  treeManager: TreeManager;\n  status: Status;\n  selectedNodeId: string | null;\n  onSelectNode: SelectNodeHandler;\n  document: Document;\n  onChangeDocumentVariable: ChangeDocumentConfigHandler;\n  onChangeGvarValue: GVarValueChangeHandler;\n}\n\nexport default class TreePanel extends React.Component<TreePanelProps, {}> {\n  private onChangeNodeVariable = (nodeConfig: NodeConfig, variableName: string, newValue: string) => {\n    this.props.treeManager.changeNodeVariable(nodeConfig.id, variableName, newValue);\n    this.forceUpdate(); // Avoid asynchronous input caret position problem :(\n  };\n\n  private onChangeDocumentVariable = (nodeConfig: NodeConfig, variableName: string, newValue: string) => {\n    this.props.onChangeDocumentVariable(variableName as any, newValue.replace(/^=/, ''));\n    this.forceUpdate(); // Avoid asynchronous input caret position problem :(\n  };\n\n  private onRepositionNode = (sourceNodeId: string, targetNodeId: string, copy: boolean) => {\n    if (copy) {\n      this.props.treeManager.copyNode(sourceNodeId, targetNodeId);\n    } else {\n      this.props.treeManager.moveNode(sourceNodeId, targetNodeId);\n    }\n  };\n\n  public render() {\n    const { treeManager, selectedNodeId, status, document, onChangeGvarValue } = this.props;\n    const selectedNodeConfig = selectedNodeId ? treeManager.getNodeOrNull(selectedNodeId) : null;\n    return (\n      <>\n        <div id=\"hierarchy\">\n          <TreeToolbar treeManager={treeManager} selectedNode={selectedNodeConfig} />\n          <NodeTree\n            nodeConfigs={treeManager.getTree()}\n            selectedNode={selectedNodeConfig}\n            onSelectNode={this.props.onSelectNode}\n            onRepositionNode={this.onRepositionNode}\n          />\n        </div>\n        <div id=\"props\">\n          {selectedNodeConfig ? (\n            <NodeConfigView nodeConfig={selectedNodeConfig} status={status} onChange={this.onChangeNodeVariable} />\n          ) : (\n            <NodeConfigView\n              nodeConfig={{\n                module: '~Document~',\n                id: '~Document~',\n                config: {\n                  width: '' + document.width,\n                  height: '' + document.height,\n                  background: '' + document.background,\n                },\n                children: [],\n              }}\n              status={status}\n              forceModule={DocumentModule}\n              onChange={this.onChangeDocumentVariable}\n            />\n          )}\n        </div>\n        <QuickGVarBar gvars={document.gvars} onChange={onChangeGvarValue} />\n      </>\n    );\n  }\n}\n","/* eslint-disable no-new-func */\nimport { VariableMap } from '../types';\n\nexport type NamespaceFn = () => VariableMap;\n\nconst expressionFnCache = {};\n\nexport function evaluateExpression(expression: string, namespace: NamespaceFn): any {\n  if (expression.startsWith('=')) {\n    const exprFun =\n      expression in expressionFnCache\n        ? expressionFnCache[expression]\n        : (expressionFnCache[expression] = new Function(\n            'namespace',\n            `with(namespace) { return ${expression.slice(1)}}`,\n          ));\n    return exprFun(namespace());\n  }\n  if (/[+-][0-9.]+/.test(expression)) {\n    return parseFloat(expression);\n  }\n  return `${expression}`;\n}\n","function hashString(s: string) {\n  let seed = 0;\n  for (let i = 0; i < s.length; i++) {\n    seed ^= i % 16 << s.charCodeAt(i);\n  }\n  return seed;\n}\n\n// Based on https://gist.github.com/blixt/f17b47c62508be59987b\n// which is based on http://www.firstpr.com.au/dsp/rand31/\n\nexport type RandomGenerator = () => number;\n\nexport default function createRandomGenerator(seedString?: string): RandomGenerator {\n  let seed = seedString ? hashString(seedString) : Math.random() * 2147483647;\n\n  const next = () => {\n    return (seed = (seed * 16807) % 2147483647);\n  };\n\n  return function nextFloat() {\n    return (next() - 1) / 2147483646;\n  };\n}\n","import { ExpressionMap, NodeConfig, VariableMap } from '../types';\nimport { evaluateExpression, NamespaceFn } from '../utils/evaluator';\nimport { default as createRandomGenerator, RandomGenerator } from '../utils/RandomGenerator';\nimport { renderNodesInto } from './render';\nimport Status from './Status';\n\nfunction _evaluate(\n  status: Status,\n  node: NodeConfig,\n  tag: string,\n  expression: string,\n  namespace: NamespaceFn,\n  errorDefault: any = null,\n): any {\n  try {\n    return evaluateExpression(expression, namespace);\n  } catch (err) {\n    status.addError(node.id, `${tag}: ${err}`);\n    console.warn(err);\n    return errorDefault;\n  }\n}\n\nfunction memoizeOnFirstInvocation<T>(creator: () => T): () => T {\n  let t: T | undefined;\n  return () => {\n    if (t === undefined) {\n      t = creator();\n    }\n    return t;\n  };\n}\n\nexport default class Context {\n  private rng?: RandomGenerator;\n  private readonly defaultNamespace: NamespaceFn = this.prepareNamespace();\n\n  constructor(\n    readonly status: Status,\n    readonly node: NodeConfig,\n    readonly parent: Context | null = null,\n    readonly variables: VariableMap = {},\n    readonly idPrefix: string = '',\n  ) {}\n\n  public subcontext(forNode: NodeConfig, newVariables: VariableMap = {}, idPrefix = ''): Context {\n    const mergedVariables = Object.assign({}, this.variables, newVariables);\n    return new Context(this.status, forNode, this, mergedVariables, `${this.idPrefix}.${idPrefix}`);\n  }\n\n  public random(min?: number, max?: number) {\n    if (!this.rng) {\n      const seed = this.evaluateFromNodeConfig('seed');\n      this.rng = createRandomGenerator(seed);\n    }\n    const val = this.rng();\n    if (min !== undefined) {\n      if (max === undefined) {\n        return val * min;\n      }\n      return min + val * (max - min);\n    }\n    return val;\n  }\n\n  public prepareNamespace(additionalVariables?: VariableMap): NamespaceFn {\n    return memoizeOnFirstInvocation(() => ({\n      rand: this.random.bind(this),\n      ...this.variables,\n      ...additionalVariables,\n    }));\n  }\n\n  public evaluateFromNodeConfig(key: string): any {\n    const expression = this.node.config[key];\n    if (expression === undefined) {\n      return null;\n    }\n    return _evaluate(this.status, this.node, key, String(expression), this.defaultNamespace);\n  }\n\n  public evaluate(tag: string, expression: string, additionalVariables?: VariableMap): any {\n    const namespace = this.prepareNamespace(additionalVariables);\n    return _evaluate(this.status, this.node, tag, expression, namespace);\n  }\n\n  public evaluateAll(node: NodeConfig, expressionMap: ExpressionMap, additionalVariables?: VariableMap): VariableMap {\n    const evaluated = {};\n    const namespace = this.prepareNamespace(additionalVariables);\n    for (const tag in expressionMap) {\n      if (expressionMap.hasOwnProperty(tag)) {\n        const expression = expressionMap[tag];\n        if (expression !== null) {\n          evaluated[tag] = _evaluate(this.status, this.node, tag, expression, namespace);\n        }\n      }\n    }\n    return evaluated;\n  }\n\n  public evaluateNodeConfig(node: NodeConfig = this.node): VariableMap {\n    return this.evaluateAll(node, node.config);\n  }\n\n  public getId(suffix: string = this.node.id) {\n    return this.idPrefix + suffix;\n  }\n\n  public renderChildren(context: Context = this) {\n    const nodes: Element[] = [];\n    renderNodesInto(nodes, this.node.children, context);\n    return nodes;\n  }\n}\n","import { VariableMap } from '../types';\n\nexport default class Status {\n  private nodeErrors: { [key: string]: string[] } = {};\n  private nodeVariables: { [key: string]: VariableMap[] } = {};\n\n  public addError(nodeId: string, error: string) {\n    if (!(nodeId in this.nodeErrors)) {\n      this.nodeErrors[nodeId] = [];\n    }\n    this.nodeErrors[nodeId].push(error);\n  }\n\n  public getErrorsForNode(nodeId: string): ReadonlyArray<string> {\n    return nodeId in this.nodeErrors ? this.nodeErrors[nodeId] : [];\n  }\n\n  public addVariables(nodeId: string, variables: VariableMap) {\n    if (!(nodeId in this.nodeVariables)) {\n      this.nodeVariables[nodeId] = [];\n    }\n    this.nodeVariables[nodeId].push(Object.assign({}, variables));\n  }\n\n  public getVariablesForNode(nodeId: string): string[] {\n    if (!(nodeId in this.nodeVariables)) {\n      return [];\n    }\n    const variables: Set<string> = new Set();\n    this.nodeVariables[nodeId].forEach((map) => {\n      Object.keys(map).forEach((key) => {\n        return variables.add(key);\n      });\n    });\n    return Array.from(variables).sort();\n  }\n}\n","import * as React from 'react';\nimport { Document, GVar } from '../types';\nimport GenericVariableConfigRow from '../components/GenericVariableConfigRow';\nimport { GVarDeleteHandler, GVarModifyHandler } from '../ui-types';\n\ninterface GVarsPanelProps {\n  document: Document;\n  onAddGvar: () => void;\n  onDeleteGvar: GVarDeleteHandler;\n  onModifyGvar: GVarModifyHandler;\n}\n\ninterface GVarPanelProps {\n  gvar: GVar;\n  onModifyGvar: GVarModifyHandler;\n  onDeleteGvar: GVarDeleteHandler;\n}\n\nfunction GVarPanel({ gvar, onModifyGvar, onDeleteGvar }: GVarPanelProps) {\n  return (\n    <div className=\"gvar-panel\" style={{ display: 'flex' }}>\n      <button className=\"btn standalone\" title=\"Delete gvar\" onClick={() => onDeleteGvar(gvar)}>\n        &times;\n      </button>\n      <table className=\"var-table\" style={{ flex: 1 }}>\n        <tbody>\n          <GenericVariableConfigRow\n            name=\"name\"\n            type=\"string\"\n            value={gvar.name}\n            onChange={(value) => onModifyGvar(gvar, 'name', value)}\n          />\n          <GenericVariableConfigRow\n            name=\"type\"\n            type=\"string\"\n            choices={['number', 'string']}\n            value={gvar.type}\n            onChange={(value) => onModifyGvar(gvar, 'type', value)}\n          />\n          <GenericVariableConfigRow\n            name=\"value\"\n            type=\"string\"\n            value={gvar.value}\n            onChange={(value) => onModifyGvar(gvar, 'value', value)}\n          />\n          {gvar.type === 'number' ? (\n            <React.Fragment>\n              <GenericVariableConfigRow\n                name=\"min\"\n                type=\"string\"\n                value={gvar.min}\n                onChange={(value) => onModifyGvar(gvar, 'min', parseFloat(value))}\n              />\n              <GenericVariableConfigRow\n                name=\"max\"\n                type=\"string\"\n                value={gvar.max}\n                onChange={(value) => onModifyGvar(gvar, 'max', parseFloat(value))}\n              />\n            </React.Fragment>\n          ) : null}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nconst GVarsPanel: React.FC<GVarsPanelProps> = (props: GVarsPanelProps) => {\n  const { document } = props;\n  return (\n    <div id=\"gvars-panel\">\n      <div id=\"gvars-toolbar\" className=\"toolbar\">\n        <div\n          className={'btn'}\n          onClick={(event) => {\n            props.onAddGvar();\n            event.preventDefault();\n          }}\n        >\n          Add new gvar\n        </div>\n      </div>\n      {document.gvars && document.gvars.length ? (\n        document.gvars.map((gvar, index) => (\n          <GVarPanel key={index} gvar={gvar} onModifyGvar={props.onModifyGvar} onDeleteGvar={props.onDeleteGvar} />\n        ))\n      ) : (\n        <i>No gvars specified</i>\n      )}\n    </div>\n  );\n};\n\nexport default GVarsPanel;\n","export function removeInPlace<T>(array: T[], obj: T): boolean {\n  const index = array.indexOf(obj);\n  if (index > -1) {\n    array.splice(index, 1);\n    return true;\n  }\n  return false;\n}\n","import * as React from 'react';\nimport GlobalToolbar from '../components/GlobalToolbar';\nimport { TreeManager } from '../managers/TreeManager';\nimport FilePanel from '../sidebar-panels/FilePanel';\nimport TreePanel from '../sidebar-panels/TreePanel';\nimport { Document, GVar, NodeConfig } from '../types';\nimport Context from '../universe/Context';\nimport Status from '../universe/Status';\nimport makeDefaultConfig from '../utils/defaultConfig';\nimport * as storage from '../utils/storage';\nimport { deserialize, serialize } from '../utils/serde';\nimport GVarsPanel from '../sidebar-panels/GVarsPanel';\nimport { removeInPlace } from '../utils/arrays';\n\ninterface AppState {\n  selectedNodeId: string | null;\n  rendered: any;\n  status: Status;\n  activeTab: 'tree' | 'gvars' | 'file';\n  document: Document;\n}\n\nconst STORAGE_KEY = 'coilSave';\n\nexport default class App extends React.Component<{}, AppState> {\n  private treeManager: TreeManager = new TreeManager();\n\n  public state: AppState = {\n    selectedNodeId: null,\n    rendered: null,\n    status: new Status(),\n    activeTab: 'tree',\n    document: {\n      nodes: [],\n      width: 800,\n      height: 800,\n      background: '',\n      gvars: [],\n    },\n  };\n\n  public componentDidMount() {\n    this.treeManager.addTreeUpdateListener((tree) => {\n      this.renderDrawing(tree);\n    });\n    this.treeManager.addTreeUpdateListener((tree) => {\n      this.saveToStorage(tree);\n    });\n\n    this.loadFromStorage();\n  }\n\n  private saveToStorage(tree?: NodeConfig[]) {\n    storage.save(STORAGE_KEY, serialize(this.state.document, tree || this.treeManager.getTree()));\n  }\n\n  private loadFromStorage() {\n    const storageObj = storage.load(STORAGE_KEY);\n    if (!storageObj) {\n      this.treeManager.replaceTree(makeDefaultConfig());\n      return;\n    }\n    try {\n      const document = deserialize(storageObj);\n      this.loadDocument(document);\n    } catch (e) {\n      alert('Loading document from storage failed: ' + e);\n    }\n  }\n\n  private loadDocument = (document: Document): void => {\n    const nodes = document.nodes;\n    document.nodes = []; // Just to make sure people know this is irrelevant\n    this.setState({ document });\n    this.treeManager.replaceTree(nodes);\n  };\n\n  private onSelectNode = (nodeConfig: NodeConfig | null): void => {\n    this.setState({\n      selectedNodeId: nodeConfig ? nodeConfig.id : null,\n    });\n  };\n\n  public renderDrawing(tree: NodeConfig[]) {\n    const status = new Status();\n    const rootPseudoNode = {\n      id: 'root',\n      module: 'root',\n      config: {},\n      children: tree,\n    };\n    const context = new Context(status, rootPseudoNode);\n    const { width, height, background, gvars } = this.state.document;\n    gvars.forEach((gvar) => {\n      context.variables[gvar.name] = gvar.value;\n    });\n    let renderedChildren;\n    try {\n      renderedChildren = context.renderChildren();\n    } catch (e) {\n      renderedChildren = (\n        <text y={50} x={50}>\n          {e.toString()}\n        </text>\n      );\n      console.error(renderedChildren);\n    }\n    const rendered = (\n      <svg width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n        {background ? <rect x={0} y={0} width={width} height={height} fill={background} id=\"background\" /> : null}\n        {renderedChildren}\n      </svg>\n    );\n    this.setState({ rendered, status });\n  }\n\n  public onChangeTab = (tabId) => {\n    this.setState({ activeTab: tabId });\n  };\n\n  private onChangeDocumentVariable = (variableName: keyof Document, value: string) => {\n    const document = this.state.document;\n    switch (variableName) {\n      case 'width':\n      case 'height':\n        document[variableName] = parseInt(value, 10);\n        break;\n      default:\n        // TODO: fix type safety here\n        (document as object)[variableName] = value;\n    }\n    this.setState({ document }, () => {\n      this.redrawCurrent();\n    });\n  };\n\n  private redrawCurrent(save = true) {\n    const tree = this.treeManager.getTree() as NodeConfig[];\n    this.renderDrawing(tree);\n    if (save) {\n      this.saveToStorage(tree);\n    }\n  }\n\n  private onAddGvar = () => {\n    const document = this.state.document;\n    const getNextGvarName = () => {\n      for (let i = 0; ; i++) {\n        const name = `${String.fromCharCode(97 + document.gvars.length)}`;\n        if (document.gvars.some((g) => g.name === name)) {\n          continue;\n        }\n        return name;\n      }\n    };\n    document.gvars.push({\n      name: getNextGvarName(),\n      type: 'number',\n      min: 0,\n      max: 1,\n      value: 0,\n    });\n    this.setState({ document });\n  };\n\n  private onModifyGvar = (gvar: GVar, key: keyof GVar, value: any) => {\n    const document = this.state.document;\n    if (document.gvars.includes(gvar)) {\n      // TODO: fix type-safety here\n      (gvar as object)[key] = value;\n      this.setState({ document }, () => {\n        if (key === 'value') {\n          this.redrawCurrent();\n        }\n      });\n    }\n  };\n  private onChangeGvarValue = (gvar: GVar, value: any) => {\n    const document = this.state.document;\n    if (document.gvars.includes(gvar)) {\n      if (gvar.type === 'number') {\n        const numVal = parseFloat(value);\n        if (isNaN(numVal)) {\n          return;\n        }\n        gvar.value = numVal;\n      }\n      this.setState({ document }, () => {\n        this.redrawCurrent();\n      });\n    }\n  };\n\n  private onDeleteGvar = (gvar: GVar) => {\n    const document = this.state.document;\n    if (removeInPlace(document.gvars, gvar)) {\n      this.setState({ document }, () => {\n        this.redrawCurrent();\n      });\n    }\n  };\n\n  public render() {\n    const { rendered, activeTab, document } = this.state;\n    let configContent: React.ReactElement | null = null;\n    switch (activeTab) {\n      case 'tree':\n        configContent = (\n          <TreePanel\n            document={document}\n            treeManager={this.treeManager}\n            status={this.state.status}\n            selectedNodeId={this.state.selectedNodeId}\n            onSelectNode={this.onSelectNode}\n            onChangeDocumentVariable={this.onChangeDocumentVariable}\n            onChangeGvarValue={this.onChangeGvarValue}\n          />\n        );\n        break;\n      case 'file':\n        configContent = (\n          <FilePanel\n            treeManager={this.treeManager}\n            rendered={rendered}\n            document={document}\n            onLoadDocument={this.loadDocument}\n          />\n        );\n        break;\n      case 'gvars':\n        configContent = (\n          <GVarsPanel\n            document={document}\n            onAddGvar={this.onAddGvar}\n            onModifyGvar={this.onModifyGvar}\n            onDeleteGvar={this.onDeleteGvar}\n          />\n        );\n        break;\n    }\n    return (\n      <>\n        <div id=\"config\">\n          <GlobalToolbar activeTab={activeTab} onChangeTab={this.onChangeTab} />\n          {configContent}\n        </div>\n        <div id=\"drawing\">{rendered}</div>\n      </>\n    );\n  }\n}\n","export function load(key: string): any | undefined {\n  const rawValue = localStorage.getItem(key);\n  if (!rawValue) {\n    return undefined;\n  }\n  try {\n    return JSON.parse(rawValue);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nexport function save(key: string, value: any) {\n  if (value === undefined || value === null) {\n    localStorage.removeItem(key);\n    return;\n  }\n  localStorage.setItem(key, JSON.stringify(value));\n}\n","import { NodeConfig } from '../types';\nimport { configure } from '../universe/configure';\n\nexport default function makeDefaultConfig(): NodeConfig[] {\n  return [\n    configure(\n      'RemoveChildren',\n      {\n        seed: 'foo',\n      },\n      [\n        configure(\n          'RectArray',\n          {\n            numberX: '7',\n            numberY: '7',\n            variableX: 'i',\n            variableY: 'j',\n          },\n          [\n            configure('Ngon', {\n              radius1: '15',\n              radius2: '5',\n              vertices: '10',\n              x: '=15 + i * 30',\n              y: '=30 + j * 30',\n              fill: 'blue',\n            }),\n          ],\n        ),\n      ],\n    ),\n  ];\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './views/App';\nimport './style.scss';\n\nconst wrapper = document.createElement('div');\nwrapper.id = 'wrapper';\ndocument.body.appendChild(wrapper);\n\nReactDOM.render(<App />, wrapper);\n","import Module from '../modules/Module';\nimport registry from '../modules/registry';\nimport { NodeConfig } from '../types';\nimport Context from './Context';\n\nexport function renderNode(context: Context, nodeConfig: NodeConfig) {\n  const module: Module = registry[nodeConfig.module];\n  if (!module) {\n    throw new Error(`not registered ${nodeConfig.module}`);\n  }\n  try {\n    context.status.addVariables(nodeConfig.id, context.variables);\n    return module.render(context.subcontext(nodeConfig, {}, nodeConfig.id));\n  } catch (e) {\n    console.error(e);\n    return [];\n  }\n}\n\nexport function renderNodesInto(targetArray: any[], nodes: NodeConfig[], context: Context) {\n  for (let i = 0; i < nodes.length; i++) {\n    const renderedElts = renderNode(context, nodes[i]);\n    for (let j = 0; j < renderedElts.length; j++) {\n      targetArray.push(renderedElts[j]);\n    }\n  }\n}\n"],"sourceRoot":""}